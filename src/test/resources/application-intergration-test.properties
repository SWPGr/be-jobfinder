# Import main application config as base
spring.config.import=optional:file:.env

# Override Database configuration for integration testing with MySQL
spring.datasource.url=jdbc:mysql://mysql:3306/jobfinder?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC&useSSL=false&serverTimezone=UTC
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Keep the same external service configurations as main app
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# Use real API keys for integration testing (from secrets)
google.gemini.api-key=${GEMINI_API_KEY}
google.gemini.model-name=gemini-1.5-flash-latest

# OAuth2 configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/api/auth/google/callback

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=email

# App Config
app.frontend.url=http://localhost:3030

# Elasticsearch (use CI service)
spring.elasticsearch.uris=http://127.0.0.1:9200
spring.elasticsearch.connection-timeout=10s
spring.elasticsearch.socket-timeout=15s

# PayOS
payos.client-id=${PAYOS_CLIENT_ID}
payos.api-key=${PAYOS_API_KEY}
payos.checksum-key=${PAYOS_CHECKSUM_KEY}

# Cloudinary
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME}
cloudinary.api-key=${CLOUDINARY_API_KEY}
cloudinary.api-secret=${CLOUDINARY_API_SECRET}

# Enable scheduler for integration testing
app.scheduler.enabled=true
spring.task.scheduling.pool.size=2

# Initialize with test data
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data-integration-test.sql
spring.sql.init.continue-on-error=true

# Reduced logging for integration tests
logging.level.org.springframework.security=WARN
logging.level.com.jobplatform=INFO
logging.level.org.springframework.web.socket=WARN
logging.level.org.springframework.messaging=WARN
debug=false

