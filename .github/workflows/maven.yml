name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, phihung]
  pull_request:
    branches: [main, develop]

env:
  JAVA_VERSION: 21
  REGISTRY: docker.io
  IMAGE_NAME: jobfinder-backend

jobs:
  # Job 1: Unit Tests với H2 (Fast)
  unit-tests:
    name: Unit Tests (H2)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: Ensure H2 dependency
        run: |
          cd be_jobfinder
          if ! grep -q "h2" pom.xml; then
            sed -i '/<\/dependencies>/i\
              <dependency>\
                <groupId>com.h2database</groupId>\
                <artifactId>h2</artifactId>\
                <scope>test</scope>\
              </dependency>' pom.xml
          fi

      - name: Make Maven wrapper executable
        run: |
          cd be_jobfinder
          chmod +x ./mvnw

      - name: Run unit tests
        run: |
          cd be_jobfinder
          ./mvnw clean test -Dspring.profiles.active=test
        env:
          MAVEN_OPTS: -Xmx1024m

      - name: Upload unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: be_jobfinder/target/surefire-reports/

  # Job 2: Integration Tests với MySQL (Thorough)
  integration-tests:
    name: Integration Tests (MySQL)
    runs-on: ubuntu-latest
    needs: unit-tests # Chỉ chạy khi unit tests pass
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: jobfinder_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

      elasticsearch:
        image: elasticsearch:8.15.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        ports:
          - 9200:9200
        options: --health-cmd="curl -f http://localhost:9200/_cluster/health" --health-interval=10s --health-timeout=10s --health-retries=10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Wait for services
        run: |
          echo "Waiting for MySQL..."
          timeout 60 bash -c 'until mysqladmin ping -h127.0.0.1 -P3306 -uroot -proot --silent; do sleep 2; done'
          echo "MySQL is ready!"

          echo "Waiting for Elasticsearch..."
          timeout 120 bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 5; done'
          echo "Elasticsearch is ready!"

      - name: Run integration tests
        run: |
          cd be_jobfinder
          ./mvnw test -Dspring.profiles.active=integration-test \
                     -Dtest="**/*IntegrationTest*" \
                     -DfailIfNoTests=false
        env:
          MAVEN_OPTS: -Xmx1024m
          # External service credentials (limited for testing)
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
          CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
          CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: be_jobfinder/target/surefire-reports/

  # Job 3: Build and Push (chỉ khi tất cả tests pass)
  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./be_jobfinder
          file: ./be_jobfinder/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  # Job 4: Notify Results
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, build-and-push]
    if: always()

    steps:
      - name: Notify success
        if: needs.unit-tests.result == 'success' && (needs.integration-tests.result == 'success' || needs.integration-tests.result == 'skipped')
        run: |
          echo "✅ Pipeline completed successfully!"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          echo "Build: ${{ needs.build-and-push.result }}"

      - name: Notify failure
        if: needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure'
        run: |
          echo "❌ Pipeline failed!"
          echo "Unit Tests: ${{ needs.unit-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
